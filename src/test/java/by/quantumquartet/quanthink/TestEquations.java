package by.quantumquartet.quanthink;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static by.quantumquartet.quanthink.math.Equations.SolveEquation;

class TestEquations {

    @ParameterizedTest
    @CsvSource({
            "x+5, -5",
            "2*x-9, 4.5",
            "-3.0x, 0",
            "6+1.5*x, -4",
            "x, 0",
            "-x-11.1, -11.1",
            "x*5+35, -7",
    })
    void TestSolveLinearEquations(String equation, String answer) {
        Assertions.assertEquals(answer, SolveEquation(equation));
    }


    @ParameterizedTest
    @CsvSource({
            "x^2-6x+5, 1 5",
            "3x^2+7x-6, -3 0.6666666666666666",
            "-x^2+7x+8, -1 8",
            "4x^2+4x+1, -0.5",
            "2x^2+x+1, -0.25±0.6614378277661477i",
            "-x^2+2x+8, -2 4",
            "9x^2-6x+1, 0.3333333333333333",
            "x^2+3x+2, -2 -1",
            "x^2-5x+6, 2 3",
    })
    void TestSolveSquareEquations(String equation, String answer) {
        Assertions.assertEquals(answer, SolveEquation(equation));
    }

    @ParameterizedTest
    @CsvSource({
            "x^3+8, -2 1.0±1.7320508075688772i",
            "7x^3+3x^2-x-9, 1 -0.7142857142857142±0.8806305718527109i",
            "4.5x^3-3x^2-0.5x+7, -1 0.8333333333333334±0.9279607271383371i",
            "8x^3+12x^2+6x-26, 1 -1.25±1.299038105676658i",
            "8x^3+12x^2+6x+28, -2 0.25±1.299038105676658i",
            "x^3-7x-12, 3.2669746134015614 -1.6334873067007807±1.0024182477677213i",
            "2x^3+5x^2-4x+1, -3.178677812942944 0.3393389064714719±0.2052978633428067i",
            "x^2-6x-8+x^3, -2 -1.5615528128088305 2.56155281280883",
            "-x^2+x+x^3-1, 1 0.0±0.9999999999999999i",
            "-9x^2+x^3+28x-24, 1.3656347069864567 3.8171826465067715±1.7330211866147032i",
            "x^3+24x-20-9x^2, 2 5",
            "5x^3-7x+3x^2+1, -1.5717113770338489 0.15599825933436598 0.8157131176994825",
            "-x^2+2x^3-x+6, -1.3964514544926823 0.9482257272463411±1.1176629018578081i",
            "x^3+x^2+4-4x, -2.875129794162779 0.9375648970813895±0.7156909967859647i",
            "-10x+4x^3-3x^2+5, -1.4903088990173123 0.4751787119798226 1.7651301870374891",
            "x^3+9x+7x^2-1, -5.2491405381295495 -1.8536345109670924 0.10277504909664037",
            "x^3-5x^2+x-12, 5.245483955093902 -0.12274197754695093±1.5075200014016128i",
            "6x^3-8x^2+3-2x, -0.6017006814573194 0.6433084208496991 1.291725593940953",
            "7x^3-3+5x^2-6x, -1.1366619372322326 -0.4381533239482579 0.8605295468947758",
            "-4+3x^3+6x^2-5x, -2.457427107756338 -0.5425728922436623 1",

    })
    void TestSolveCubeEquations(String equation, String answer) {
        Assertions.assertEquals(answer, SolveEquation(equation));
    }

    @ParameterizedTest
    @CsvSource({
            "x^4-7x^2+12, -2 -1.7320508075688776 1.7320508075688776 2",
            "x^4+2x^3-9x^2-20x+24, 0.9290353233824729 2.754676168907842 -2.8418557461451575±1.140972302783389i",
            "x^4-x^3+x^2-x, 0 1 0.0±1.0i",
            "x^4+x^3+x^2+x, -1 0 0.0±1.0i",
            "x^4-x^2+x-6, -1.8281719014085922 1.6278565879609501 0.10015765672382117±1.4163673048451426i",
            "x^4-x^3+3x^2-x, 0 0.36110308052864737 0.3194484597356767±1.6331702409152362i",
            "x^4-x^3+x^2-x+1, -0.30901699437494745±0.9510565162951539i 0.8090169943749475±0.5877852522924729i",
            "x^4-x^2-x+15, -1.4793019877548672±1.3628400473634645i 1.4793019877548672±1.2326133810945565i",
            "x^4-2x^3+x^2-x, 0 1.7548776662466927 0.1225611668766537±0.7448617666197442i",
    })
    void TestSolveQuadraticEquations(String equation, String answer) {
        Assertions.assertEquals(answer, SolveEquation(equation));
    }

    @ParameterizedTest
    @CsvSource({
            "x^5-10x^3+25x^2-30x+12, -4.216284950737348 0.6985981076838914 1.826392027288295 0.8456474078825805±1.2310655986041252i",
            "x^5+3x^4+7x^3+5x^2+8x+6, -0.8124439694326794 -1.3731165964096315±1.8709115425464447i 0.2793385811259712±1.1371903235348473i",
            "x^5+x^4-2x^3-x^2+x-1, 1.2177360761317852 -1.4187835700502833±0.21916531057075353i 0.3099155319843907±0.5499105361862413i",
            "x^5-x-1, 1.1673039782614856 -0.7648844336006798±0.3524715460318958i 0.18123244446993703±1.0839541013177691i",
            "x^5-6x^4+11x^3-10x^2+5x, 0 1.381966011250105 3.618033988749895 0.5±0.8660254037844385i",
            "x^5-8x^4+26x^3-40x^2+32x, 0 2.956145157584922±1.3835510696656972i 2.956145157584922±1.3835510696656972i",
            "x^5-10x^4+35x^3-60x^2+60x, 0 3.505692194778895 4.65658546538949 0.9188611699158105±1.6825988321891197i",
            "x^5-12x^4+54x^3-96x^2+96x, 0 1.0879648437317473±1.4446001632053822i 4.912035156268253±2.2858012262833594i",
            "x^5-14x^4+84x^3-168x^2+196x-128, 1.4092177174521454 0.5204140197325642±1.2079307333943259i 5.7749771215413634±4.3766473626706945i",
            "x^5-15x^4+105x^3-225x^2+315x-243, 1.444526851673044 0.5095489364198142±1.461172608645502i 6.268187637743663±5.564002147817288i",
    })
    void TestSolvePentaEquations(String equation, String answer) {
        Assertions.assertEquals(answer, SolveEquation(equation));
    }

}
